pluginManagement {
    def flutterSdkPath = new File(settingsDir.parentFile, '.flutter-sdk')
    if (!flutterSdkPath.exists()) {
        def localProperties = new Properties()
        def localPropertiesFile = new File(settingsDir, "local.properties")
        if (localPropertiesFile.exists()) {
            localPropertiesFile.withReader("UTF-8") { reader ->
                localProperties.load(reader)
            }
            def flutterSdkPathProperty = localProperties.getProperty("flutter.sdk")
            if (flutterSdkPathProperty != null) {
                flutterSdkPath = new File(flutterSdkPathProperty)
            }
        }
    }

    plugins {
        id 'com.android.application' version '7.3.0'
        id 'com.android.library' version '7.3.0'
        id 'org.jetbrains.kotlin.android' version '1.7.10'
        id 'com.google.gms.google-services' version '4.4.1'
        id 'dev.flutter.flutter-gradle-plugin' version '1.0.0' apply false
    }

    repositories {
        google()
        mavenCentral()
        gradlePluginPortal()
        maven {
            url 'https://storage.googleapis.com/download.flutter.io'
        }
        maven {
            url 'https://maven.google.com'
        }
    }
}

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    repositories {
        google()
        mavenCentral()
        maven {
            url 'https://storage.googleapis.com/download.flutter.io'
        }
        maven {
            url 'https://maven.google.com'
        }
    }
}

include ':app'

def flutterProjectRoot = rootProject.projectDir.parentFile
def plugins = new Properties()
def flutterPluginsFile = new File(flutterProjectRoot, '.flutter-plugins')
if (flutterPluginsFile.exists()) {
    flutterPluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
}

plugins.each { name, path ->
    def pluginDirectory = flutterProjectRoot.toPath().resolve(path).toFile()
    include ":$name"
    project(":$name").projectDir = pluginDirectory
} 